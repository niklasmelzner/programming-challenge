@startuml

interface TableSource {

    + DataTable loadData()

}

class CSVTableSource {
    + CSVTableSource(inputStream: InputStream)
}
CSVTableSource -right-|> TableSource

class "((JsonTableSource))" {
    + JsonTableSource(inputStream: InputStream)
}
"((JsonTableSource))" -up-|> TableSource

class "((•••))"

note left of "(•••)"
    Polymorph implementation
    to allow storage of additional
    information, that might be
    required by, e.g., a web service.
end note

"((•••))" -up-|> TableSource

class DataTable {
    columns: Map<String, TextColumn>
    addColumn(name: String, column: TextColumn)
    getColumn(name: String): TextColumn
}

DataTable "1"-up-"*" TextColumn

abstract class Column<T> {
    T[] values
    size(): int
    get(index: int): T
}
note left of Column::get
    write protection
end note

class TextColumn {
    numericalColumn: NumericalColumn
    toNumericalColumn(): NumericalColumn
}
note left of TextColumn::numericalColumn
    buffer field for toNumericalColumn()
    (initialize on requirement))
end note

class NumericalColumn {

}

TextColumn "1"-right-"0..1" NumericalColumn
TextColumn -up-|> Column: "<<bind>>\nString"
NumericalColumn -up-|> Column: "<<bind>>\nDouble"
DataTable -left- TableSource


@enduml